#!/usr/bin/env node
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var umzugOptions = function () {
  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(command, flags, umzug) {
    var opts;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!((0, _lodash.isNil)(flags.to) && (0, _lodash.isNil)(flags.from) && !(0, _lodash.isNil)(flags.only))) {
              _context.next = 2;
              break;
            }

            return _context.abrupt('return', flags.only);

          case 2:

            if (flags.to === '0') {
              flags.to = 0;
            }

            if (flags.from === '0') {
              flags.from = 0;
            }

            opts = (0, _lodash.omitBy)({ to: flags.to, from: flags.from }, _lodash.isNil);

            if ((0, _lodash.isNil)(flags.step)) {
              _context.next = 8;
              break;
            }

            _context.next = 8;
            return applyStepOption(command, umzug, opts, flags.step);

          case 8:
            return _context.abrupt('return', opts);

          case 9:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function umzugOptions(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();

var applyStepOption = function () {
  var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(command, umzug, opts, steps) {
    var migrations, limit, _limit;

    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            // Default to 1 step if no number is provided
            if (steps === '') {
              steps = 1;
            }

            // Use the list of pending or executed migrations to determine what would happen without --step

            if (!(command === 'up')) {
              _context2.next = 7;
              break;
            }

            _context2.next = 4;
            return umzug.pending();

          case 4:
            _context2.t0 = _context2.sent;
            _context2.next = 10;
            break;

          case 7:
            _context2.next = 9;
            return umzug.executed().then(function (m) {
              return m.reverse();
            });

          case 9:
            _context2.t0 = _context2.sent;

          case 10:
            migrations = _context2.t0;


            // Remove migrations prior to the one used in --from
            // If it isn't in the list, the --from option has no effect
            if (opts.from) {
              limit = migrations.find(function (m) {
                return m.file.startsWith(opts.to);
              });

              migrations = migrations.slice(Math.min(0, migrations.indexOf(limit)));
            }

            // Remove migrations after the one used in --to
            // If it isn't in the list, we remove everything, causing a 'migration not pending' notice to show
            if (opts.to) {
              _limit = migrations.find(function (m) {
                return m.file.startsWith(opts.to);
              });

              migrations = migrations.slice(0, migrations.indexOf(_limit) + 1);
            }

            // Limit to the number of migrations available
            steps = Math.min(migrations.length, steps);

            // Override the --to option to limit the number of steps taken
            if (steps > 0) {
              opts.to = migrations[steps - 1].file;
            }

          case 15:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function applyStepOption(_x4, _x5, _x6, _x7) {
    return _ref2.apply(this, arguments);
  };
}();

var knexMigrate = function () {
  var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee10(command, flags, progress) {
    var _this = this;

    var umzug, debug, api;
    return _regenerator2.default.wrap(function _callee10$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            flags = flags || {};
            progress = progress || function () {};

            umzug = umzugKnex(flags, knexInit(flags));

            debug = function debug(action) {
              return function (migration) {
                progress({
                  action: action,
                  migration: (0, _path.relative)(flags.cwd, (0, _path.resolve)(flags.migrations, migration + '.js'))
                });
              };
            };

            umzug.on('migrating', debug('migrate')).on('reverting', debug('revert')).on('debug', debug('debug'));

            api = {
              generate: function () {
                var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3() {
                  var migrationsPath, val, template, name;
                  return _regenerator2.default.wrap(function _callee3$(_context3) {
                    while (1) {
                      switch (_context3.prev = _context3.next) {
                        case 0:
                          if (flags.name) {
                            _context3.next = 2;
                            break;
                          }

                          throw new Error('A name must be specified for the generated migration');

                        case 2:
                          migrationsPath = umzug.options.migrations.path;
                          _context3.next = 5;
                          return _ensureFolder(migrationsPath);

                        case 5:
                          val = _context3.sent;
                          _context3.next = 8;
                          return _generateStubTemplate(flags);

                        case 8:
                          template = _context3.sent;
                          _context3.next = 11;
                          return _writeNewMigration(migrationsPath, flags.name, template);

                        case 11:
                          name = _context3.sent;
                          return _context3.abrupt('return', (0, _path.relative)(flags.cwd, name));

                        case 13:
                        case 'end':
                          return _context3.stop();
                      }
                    }
                  }, _callee3, _this);
                }));

                return function generate() {
                  return _ref4.apply(this, arguments);
                };
              }(),
              list: function () {
                var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4() {
                  var migrations;
                  return _regenerator2.default.wrap(function _callee4$(_context4) {
                    while (1) {
                      switch (_context4.prev = _context4.next) {
                        case 0:
                          _context4.next = 2;
                          return umzug.executed();

                        case 2:
                          migrations = _context4.sent;
                          return _context4.abrupt('return', migrations.map(function (m) {
                            return (0, _path.relative)(flags.cwd, (0, _path.resolve)(flags.migrations, m.file));
                          }));

                        case 4:
                        case 'end':
                          return _context4.stop();
                      }
                    }
                  }, _callee4, _this);
                }));

                return function list() {
                  return _ref5.apply(this, arguments);
                };
              }(),
              pending: function () {
                var _ref6 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5() {
                  var migrations;
                  return _regenerator2.default.wrap(function _callee5$(_context5) {
                    while (1) {
                      switch (_context5.prev = _context5.next) {
                        case 0:
                          _context5.next = 2;
                          return umzug.pending();

                        case 2:
                          migrations = _context5.sent;
                          return _context5.abrupt('return', migrations.map(function (m) {
                            return (0, _path.relative)(flags.cwd, (0, _path.resolve)(flags.migrations, m.file));
                          }));

                        case 4:
                        case 'end':
                          return _context5.stop();
                      }
                    }
                  }, _callee5, _this);
                }));

                return function pending() {
                  return _ref6.apply(this, arguments);
                };
              }(),
              rollback: function () {
                var _ref7 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee6() {
                  var migrations, maxBatch, lastBatch, firstFromBatch;
                  return _regenerator2.default.wrap(function _callee6$(_context6) {
                    while (1) {
                      switch (_context6.prev = _context6.next) {
                        case 0:
                          _context6.next = 2;
                          return umzug.storage.migrations();

                        case 2:
                          migrations = _context6.sent;

                          if (!(migrations.length === 0)) {
                            _context6.next = 5;
                            break;
                          }

                          return _context6.abrupt('return');

                        case 5:
                          maxBatch = (0, _lodash.maxBy)(migrations, 'batch').batch;
                          lastBatch = (0, _lodash.filter)(migrations, { batch: maxBatch });
                          firstFromBatch = (0, _lodash.minBy)(lastBatch, 'migration_time');
                          return _context6.abrupt('return', umzug.down({ to: firstFromBatch.name }));

                        case 9:
                        case 'end':
                          return _context6.stop();
                      }
                    }
                  }, _callee6, _this);
                }));

                return function rollback() {
                  return _ref7.apply(this, arguments);
                };
              }(),
              redo: function () {
                var _ref8 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee7() {
                  var history, args;
                  return _regenerator2.default.wrap(function _callee7$(_context7) {
                    while (1) {
                      switch (_context7.prev = _context7.next) {
                        case 0:
                          _context7.next = 2;
                          return umzug.executed();

                        case 2:
                          history = _context7.sent;
                          args = {};

                          if (history.length > 0) {
                            args.to = history[history.length - 1].file;
                          }
                          _context7.next = 7;
                          return knexMigrate('rollback', {}, progress);

                        case 7:
                          _context7.next = 9;
                          return knexMigrate('up', args, progress);

                        case 9:
                        case 'end':
                          return _context7.stop();
                      }
                    }
                  }, _callee7, _this);
                }));

                return function redo() {
                  return _ref8.apply(this, arguments);
                };
              }(),
              up: function () {
                var _ref9 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee8() {
                  var opts;
                  return _regenerator2.default.wrap(function _callee8$(_context8) {
                    while (1) {
                      switch (_context8.prev = _context8.next) {
                        case 0:
                          _context8.next = 2;
                          return umzugOptions('up', flags, umzug);

                        case 2:
                          opts = _context8.sent;
                          _context8.next = 5;
                          return umzug.storage.ensureTable();

                        case 5:
                          return _context8.abrupt('return', umzug.up(opts));

                        case 6:
                        case 'end':
                          return _context8.stop();
                      }
                    }
                  }, _callee8, _this);
                }));

                return function up() {
                  return _ref9.apply(this, arguments);
                };
              }(),
              down: function () {
                var _ref10 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee9() {
                  var opts;
                  return _regenerator2.default.wrap(function _callee9$(_context9) {
                    while (1) {
                      switch (_context9.prev = _context9.next) {
                        case 0:
                          _context9.next = 2;
                          return umzugOptions('down', flags, umzug);

                        case 2:
                          opts = _context9.sent;
                          _context9.next = 5;
                          return umzug.storage.ensureTable();

                        case 5:
                          return _context9.abrupt('return', umzug.down(opts));

                        case 6:
                        case 'end':
                          return _context9.stop();
                      }
                    }
                  }, _callee9, _this);
                }));

                return function down() {
                  return _ref10.apply(this, arguments);
                };
              }()
            };

            if (command in api) {
              _context10.next = 8;
              break;
            }

            throw new Error('Unknown command: ' + command);

          case 8:
            _context10.prev = 8;
            _context10.next = 11;
            return api[command].apply(null, flags);

          case 11:
            return _context10.abrupt('return', _context10.sent);

          case 12:
            _context10.prev = 12;

            umzug.storage.knex.destroy();
            return _context10.finish(12);

          case 15:
          case 'end':
            return _context10.stop();
        }
      }
    }, _callee10, this, [[8,, 12, 15]]);
  }));

  return function knexMigrate(_x8, _x9, _x10) {
    return _ref3.apply(this, arguments);
  };
}();

var _path = require('path');

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _reqFrom = require('req-from');

var _reqFrom2 = _interopRequireDefault(_reqFrom);

var _umzug = require('umzug');

var _umzug2 = _interopRequireDefault(_umzug);

var _lodash = require('lodash');

var _prettyjson = require('prettyjson');

var prettyjson = _interopRequireWildcard(_prettyjson);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function normalizeFlags(flags) {
  if ((0, _path.isAbsolute)(flags.knexfile || '') && !flags.cwd) {
    flags.cwd = (0, _path.dirname)(flags.knexfile);
  }

  if ((0, _path.isAbsolute)(flags.migrations || '') && !flags.cwd) {
    flags.cwd = (0, _path.dirname)(flags.migrations);
  }

  flags.cwd = flags.cwd || process.cwd();
  flags.knexfile = flags.knexfile || 'knexfile.js';

  flags.knexfile = (0, _path.resolve)(flags.cwd, flags.knexfile);

  flags.env = flags.env || process.env.KNEX_ENV || process.env.NODE_ENV || 'development';
}

function knexInit(flags) {
  normalizeFlags(flags);

  var knex = _reqFrom2.default.silent(flags.cwd, 'knex');

  if ((0, _lodash.isNil)(knex)) {
    console.error('Knex not found in \'' + flags.cwd + '\'');
    console.error("Please install it as local dependency with 'npm install --save knex'");
    process.exit(1);
  }

  var config = void 0;

  try {
    config = require(flags.knexfile);
  } catch (err) {
    if (/Cannot find module/.test(err.message)) {
      console.error('No knexfile at \'' + flags.knexfile + '\'');
      console.error("Please create one or bootstrap using 'knex init'");
      process.exit(1);
    }

    throw err;
  }

  if (config[flags.env] && config[flags.env]) {
    config = config[flags.env];
  }

  if ((typeof config === 'undefined' ? 'undefined' : (0, _typeof3.default)(config)) !== 'object') {
    console.error('Malformed knexfile.js:');
    console.error((0, _stringify2.default)(config, null, 2));
    process.exit(1);
  }

  flags.migrations = flags.migrations || config.migrations && config.migrations.directory || 'migrations';
  flags.migrations = (0, _path.resolve)(flags.cwd, flags.migrations);

  if (!(0, _fs.existsSync)(flags.migrations)) {
    console.error('No migrations directory at \'' + flags.migrations + '\'');
    console.error("Please create your first migration with 'knex migrate:make <name>'");
    process.exit(1);
  }

  if (flags.verbose) {
    var environment = (0, _assign2.default)({}, flags, { config: config });
    var oldConnection = null;
    if (environment.config && environment.config.connection) {
      oldConnection = environment.config.connection;
      environment.config.connection = '<REDACTED>';
    }
    console.error(prettyjson.render(environment, { noColor: true }));
    if (oldConnection) {
      environment.config.connection = oldConnection;
    }
  }

  if (config.client === 'sqlite3') {
    config.useNullAsDefault = true;
  }

  config.pool = { max: 1, min: 0, idleTimeoutMillis: 1000 };

  return knex(config);
}

function umzugKnex(flags, connection) {
  return new _umzug2.default({
    storage: (0, _path.resolve)(__dirname, 'storage'),
    storageOptions: { connection: connection },
    migrations: {
      params: [connection, _bluebird2.default],
      path: flags.migrations,
      pattern: /^\d+[\w-_]+\.js$/,
      wrap: function wrap(fn) {
        return function (knex, Promise) {
          if (flags.raw) {
            return Promise.resolve(fn(knex, Promise));
          } else {
            return knex.transaction(function (tx) {
              return Promise.resolve(fn(tx, Promise));
            });
          }
        };
      }
    }
  });
}

function _ensureFolder(dir) {
  return _bluebird2.default.promisify(_fs2.default.stat, { context: _fs2.default })(dir).catch(function () {
    return _bluebird2.default.promisify(mkdirp)(dir);
  });
}

function _generateStubTemplate(flags) {
  var stubPath = flags.stub || (0, _path.resolve)(__dirname, '..', 'stub', 'js.stub');
  return _bluebird2.default.promisify(_fs2.default.readFile, { context: _fs2.default })(stubPath).then(function (stub) {
    return (0, _lodash.template)(stub.toString(), { variable: 'd' });
  });
}

function _writeNewMigration(dir, name, tmpl) {
  if (name[0] === '-') name = name.slice(1);
  var filename = yyyymmddhhmmss() + '_' + name + '.js';
  var variables = {};
  if (name.indexOf('create_') === 0) {
    console.log(name);
    variables.tableName = name.slice(7);
  }
  return _bluebird2.default.promisify(_fs2.default.writeFile, { context: _fs2.default })((0, _path.resolve)(dir, filename), tmpl(variables)).return((0, _path.resolve)(dir, filename));
}

function padDate(segment) {
  segment = segment.toString();
  return segment[1] ? segment : '0' + segment;
}

function yyyymmddhhmmss() {
  var d = new Date();
  return d.getFullYear().toString() + padDate(d.getMonth() + 1) + padDate(d.getDate()) + padDate(d.getHours()) + padDate(d.getMinutes()) + padDate(d.getSeconds());
}

exports.default = knexMigrate;