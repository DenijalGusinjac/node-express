#!/usr/bin/env node
'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var main = function () {
  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
    var command, result;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (cli.input.length < 1 && !cli.flags.list) {
              help();
            }

            command = cli.input[0];


            if (command === 'generate') {
              if ((0, _lodash.isNil)(cli.flags.name) && !(0, _lodash.isNil)(cli.input[1])) {
                cli.flags.name = cli.input[1];
              }
            } else {
              if ((0, _lodash.isNil)(cli.flags.to) && !(0, _lodash.isNil)(cli.input[1])) {
                cli.flags.to = cli.input[1];
              }
            }

            _context.prev = 3;
            _context.next = 6;
            return (0, _2.default)(command, cli.flags, consoleDebug(process.stdout));

          case 6:
            result = _context.sent;


            if (Array.isArray(result) && typeof result[0] === 'string') {
              console.log(result.join('\n'));
            }
            if (typeof result === 'string') {
              console.log(result);
            }
            _context.next = 15;
            break;

          case 11:
            _context.prev = 11;
            _context.t0 = _context['catch'](3);

            console.error(_context.t0.message);
            process.exit(1);

          case 15:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this, [[3, 11]]);
  }));

  return function main() {
    return _ref.apply(this, arguments);
  };
}();

var _meow = require('meow');

var _meow2 = _interopRequireDefault(_meow);

var _lodash = require('lodash');

var _ = require('./');

var _2 = _interopRequireDefault(_);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var cli = (0, _meow2.default)('\n  Usage\n    $ knex-migrate <command> [options]\n\n  Commands\n    generate  Generate migration\n    pending   Lists all pending migrations\n    list      Lists all executed migrations\n    up        Performs all pending migrations\n    down      Rollbacks last migration\n    rollback  Rollbacks last batch of migrations\n    redo      Rollbacks last batch and performs all migrations\n\n  Options for "up" and "down":\n    --to, -t    Migrate upto (downto) specific version\n    --from, -f  Start migration from specific version\n    --only, -o  Migrate only specific version\n    --step, -s  Limit the number of migrations to apply\n\n  Global options:\n    --cwd         Specify the working directory\n    --knexfile    Specify the knexfile path ($cwd/knexfile.js)\n    --migrations  Specify migrations path ($cwd/migrations)\n    --env         Specify environment ($KNEX_ENV || $NODE_ENV || \'development\')\n    --raw         Disable transactions\n    --verbose     Be more verbose\n\n  As a convenience, you can skip --to flag, and just provide migration name.\n\n  Examples\n    $ knex-migrate up                    # migrate to the latest version\n    $ knex-migrate up 20160905           # migrate to a specific version\n    $ knex-migrate up --to 20160905      # the same as above\n    $ knex-migrate up --only 201609085   # apply a single migration\n    $ knex-migrate up --step             # apply only the next migration\n    $ knex-migrate up --step 2           # apply only the next two migrations\n    $ knex-migrate down --to 0           # rollback all migrations\n    $ knex-migrate down                  # rollback single migration\n    $ knex-migrate down --step 2         # rollback the previous two migrations\n    $ knex-migrate rollback              # rollback previous "up"\n    $ knex-migrate redo --verbose        # rollback and migrate everything\n    $ knex-migrate generate create_users # generate migration creating users table\n ', {
  alias: {
    to: 't',
    from: 'f',
    only: 'o',
    step: 's'
  },
  string: ['to', 'from', 'only', 'step']
});

function help() {
  console.log(cli.help);
  process.exit(1);
}

function consoleDebug(stdout) {
  return function (_ref2) {
    var action = _ref2.action,
        migration = _ref2.migration;

    if (action === 'migrate') {
      stdout.write('\u2191 ' + migration + '\n');
    } else if (action === 'revert') {
      stdout.write('\u2193 ' + migration + '\n');
    } else {
      stdout.write(migration + '\n');
    }
  };
}

main().then(function () {}, function (err) {
  if (cli.flags.verbose) {
    console.error(err.stack);
  } else {
    console.error(err.message);
  }
  process.exit(1);
});